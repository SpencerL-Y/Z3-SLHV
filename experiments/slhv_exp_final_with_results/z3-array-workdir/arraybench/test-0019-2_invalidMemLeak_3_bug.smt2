; 
(set-info :status unknown)
(declare-sort Heap 0)
 (declare-fun accessible (Heap Int Int) Bool)
(declare-fun free (Heap Int) Heap)
(declare-fun disjoint (Int Int Int Int) Bool)
(declare-fun mallocsize (Heap Int) Int)
(declare-fun freeable (Heap Int) Bool)
(declare-fun malloc (Heap Int Int) Heap)
(declare-fun contained (Int Int Int Int) Bool)
(declare-fun mallocable (Heap Int Int) Bool)
(declare-fun epsilon () Heap)
(declare-fun heaptop (Heap) Int)
(declare-fun mallocable_top (Heap Int Int) Bool)
(declare-fun mallocable_size (Heap Int Int) Bool)
(declare-fun read (Heap Int) Int)
(declare-fun write (Heap Int Int) Heap)
(declare-fun l1 () Int)
(declare-fun A_3 () Heap)
(declare-fun loc_3 () Int)
(declare-fun $i5_free_data0_2 () Int)
(declare-fun $i5_free_data0_3 () Int)
(declare-fun $p4_free_data0_2 () Int)
(declare-fun $p4_free_data0_3 () Int)
(declare-fun $p4_alloc_data0_2 () Int)
(declare-fun $p4_alloc_data0_3 () Int)
(declare-fun $p3_free_data0_2 () Int)
(declare-fun $p3_free_data0_3 () Int)
(declare-fun $p3_alloc_data0_2 () Int)
(declare-fun $p3_alloc_data0_3 () Int)
(declare-fun $p2_free_data0_2 () Int)
(declare-fun $p2_free_data0_3 () Int)
(declare-fun $p2_alloc_data0_2 () Int)
(declare-fun $p2_alloc_data0_3 () Int)
(declare-fun $p1_free_data0_2 () Int)
(declare-fun $p1_free_data0_3 () Int)
(declare-fun $p1_alloc_data0_2 () Int)
(declare-fun $p1_alloc_data0_3 () Int)
(declare-fun $p0_main0_2 () Int)
(declare-fun $p0_main0_3 () Int)
(declare-fun $p0_free_data0_2 () Int)
(declare-fun $p0_free_data0_3 () Int)
(declare-fun $p0_alloc_data0_2 () Int)
(declare-fun $p0_alloc_data0_3 () Int)
(declare-fun A9_3 () Heap)
(declare-fun $r_main01_3 () Int)
(declare-fun $r_main0_3 () Int)
(declare-fun $p7_free_data01_3 () Int)
(declare-fun $p7_free_data0_3 () Int)
(declare-fun $p6_free_data01_3 () Int)
(declare-fun $p6_free_data0_3 () Int)
(declare-fun A8_3 () Heap)
(declare-fun A_2 () Heap)
(declare-fun loc_2 () Int)
(declare-fun $r_main0_1 () Int)
(declare-fun $r_main0_2 () Int)
(declare-fun $i5_free_data0_1 () Int)
(declare-fun $p7_free_data0_1 () Int)
(declare-fun $p7_free_data0_2 () Int)
(declare-fun $p6_free_data0_1 () Int)
(declare-fun $p6_free_data0_2 () Int)
(declare-fun $p4_free_data0_1 () Int)
(declare-fun $p4_alloc_data0_1 () Int)
(declare-fun $p3_free_data0_1 () Int)
(declare-fun $p3_alloc_data0_1 () Int)
(declare-fun $p2_free_data0_1 () Int)
(declare-fun $p2_alloc_data0_1 () Int)
(declare-fun $p1_free_data0_1 () Int)
(declare-fun $p1_alloc_data0_1 () Int)
(declare-fun $p0_main0_1 () Int)
(declare-fun $p0_free_data0_1 () Int)
(declare-fun $p0_alloc_data0_1 () Int)
(declare-fun loc_1 () Int)
(declare-fun A7_2 () Heap)
(declare-fun A6_2 () Heap)
(declare-fun A_1 () Heap)
(declare-fun $r_main0_0 () Int)
(declare-fun $p7_free_data0_0 () Int)
(declare-fun $p6_free_data0_0 () Int)
(declare-fun A5_1 () Heap)
(declare-fun $p4_free_data01_1 () Int)
(declare-fun $p4_alloc_data01_1 () Int)
(declare-fun $p3_free_data01_1 () Int)
(declare-fun $p3_alloc_data01_1 () Int)
(declare-fun $p2_free_data01_1 () Int)
(declare-fun $p2_alloc_data01_1 () Int)
(declare-fun $p1_free_data01_1 () Int)
(declare-fun $p1_alloc_data01_1 () Int)
(declare-fun $p0_main01_1 () Int)
(declare-fun $p0_free_data01_1 () Int)
(declare-fun $p0_alloc_data01_1 () Int)
(declare-fun $i5_free_data01_1 () Int)
(declare-fun A4_1 () Heap)
(declare-fun A3_1 () Heap)
(declare-fun A2_1 () Heap)
(declare-fun A1_1 () Heap)
(declare-fun A_0 () Heap)
(declare-fun loc_0 () Int)
(assert
 (forall ((h Heap) (p Int) (s Int) (q Int) (t Int) )(let (($x151 (freeable h p)))
 (let (($x152 (and $x151 (not (disjoint p (mallocsize h p) q t)))))
 (let (($x154 (accessible h q t)))
 (let (($x146 (accessible (free h p) q t)))
 (let (($x155 (= $x146 $x154)))
 (let (($x149 (disjoint p (mallocsize h p) q t)))
 (let (($x156 (and $x151 $x149)))
 (let (($x161 (accessible (malloc h p s) q t)))
 (let (($x162 (= $x161 $x154)))
 (let (($x46 (contained p s q t)))
 (let (($x164 (and (mallocable h p s) $x46)))
 (let (($x165 (not $x164)))
 (let (($x171 (and (= (accessible epsilon p s) false) (=> $x164 (= $x161 true)))))
 (let (($x174 (and (and (and $x171 (=> $x165 $x162)) (=> (not $x151) $x155)) (=> $x156 $x155))))
 (and $x174 (=> $x152 (= $x146 false))))))))))))))))))
 )
(assert
 (forall ((h Heap) (p Int) (s Int) (q Int) )(let (($x92 (freeable h q)))
 (let ((?x93 (free h p)))
 (let (($x94 (freeable ?x93 q)))
 (let (($x95 (= $x94 $x92)))
 (let (($x30 (and (distinct p q) true)))
 (let ((?x99 (malloc h p s)))
 (let (($x100 (freeable ?x99 q)))
 (let (($x101 (= $x100 $x92)))
 (let (($x33 (= p q)))
 (let (($x103 (and (mallocable h p s) $x33)))
 (let (($x104 (not $x103)))
 (let (($x111 (and (and (= (freeable epsilon q) false) (=> $x103 (= $x100 true))) (=> $x104 $x101))))
 (and (and $x111 (=> $x33 (= $x94 false))) (=> $x30 $x95)))))))))))))))
 )
(assert
 (forall ((h Heap) (p Int) (s Int) )(let ((?x63 (heaptop h)))
 (let (($x66 (= (heaptop (free h p)) ?x63)))
 (let (($x14 (= (heaptop epsilon) 0)))
 (and (and $x14 $x66) (= (heaptop (malloc h p s)) (+ p s)))))))
 )
(assert
 (forall ((h Heap) (p Int) (s Int) )(= (mallocable h p s) (and (mallocable_size h p s) (mallocable_top h p s))))
 )
(assert
 (forall ((h Heap) (p Int) (s Int) (q Int) )(let ((?x117 (mallocsize h q)))
 (let ((?x99 (malloc h p s)))
 (let ((?x118 (mallocsize ?x99 q)))
 (let (($x119 (= ?x118 ?x117)))
 (let (($x33 (= p q)))
 (let (($x103 (and (mallocable h p s) $x33)))
 (let (($x104 (not $x103)))
 (let ((?x93 (free h p)))
 (let ((?x123 (mallocsize ?x93 q)))
 (let (($x124 (= ?x123 ?x117)))
 (let (($x126 (and (freeable h p) $x33)))
 (let (($x127 (not $x126)))
 (let (($x134 (and (and (= (mallocsize epsilon q) 0) (=> $x126 (= ?x123 0))) (=> $x127 $x124))))
 (and (and $x134 (=> $x103 (= ?x118 s))) (=> $x104 $x119))))))))))))))))
 )
(assert
 (forall ((h Heap) (p Int) (x Int) (q Int) )(let ((?x28 (read (write h p x) q)))
 (let (($x29 (= ?x28 (read h q))))
 (let (($x30 (and (distinct p q) true)))
 (and (=> (= p q) (= ?x28 x)) (=> $x30 $x29))))))
 )
(assert
 (forall ((p Int) (s Int) (q Int) (t Int) )(let (($x46 (contained p s q t)))
 (= $x46 (and (<= p q) (<= (+ q t) (+ p s))))))
 )
(assert
 (forall ((p Int) (s Int) (q Int) (t Int) )(let (($x40 (disjoint p s q t)))
 (= $x40 (or (<= (+ p s) q) (<= (+ q t) p)))))
 )
(assert
 (forall ((h Heap) (p Int) (s Int) )(let (($x18 (mallocable_size h p s)))
 (= $x18 (and (distinct s 0) true))))
 )
(assert
 (forall ((h Heap) (p Int) (s Int) )(let (($x55 (mallocable_top h p s)))
 (= $x55 (>= p (heaptop h)))))
 )
(assert
 (let (($x752 (= loc_3 4)))
 (let (($x747 (= $i5_free_data0_3 $i5_free_data0_2)))
 (let (($x748 (and true $x747)))
 (let (($x743 (= $p4_free_data0_3 $p4_free_data0_2)))
 (let (($x740 (= $p4_alloc_data0_3 $p4_alloc_data0_2)))
 (let (($x737 (= $p3_free_data0_3 $p3_free_data0_2)))
 (let (($x734 (= $p3_alloc_data0_3 $p3_alloc_data0_2)))
 (let (($x731 (= $p2_free_data0_3 $p2_free_data0_2)))
 (let (($x728 (= $p2_alloc_data0_3 $p2_alloc_data0_2)))
 (let (($x725 (= $p1_free_data0_3 $p1_free_data0_2)))
 (let (($x722 (= $p1_alloc_data0_3 $p1_alloc_data0_2)))
 (let (($x719 (= $p0_main0_3 $p0_main0_2)))
 (let (($x716 (= $p0_free_data0_3 $p0_free_data0_2)))
 (let (($x720 (and (and (and true (= $p0_alloc_data0_3 $p0_alloc_data0_2)) $x716) $x719)))
 (let (($x738 (and (and (and (and (and (and $x720 $x722) $x725) $x728) $x731) $x734) $x737)))
 (let (($x744 (and (and $x738 $x740) $x743)))
 (let (($x706 (= A_3 A9_3)))
 (let (($x703 (= $r_main0_3 $r_main01_3)))
 (let (($x700 (= $p7_free_data0_3 $p7_free_data01_3)))
 (let (($x698 (= $p6_free_data0_3 $p6_free_data01_3)))
 (let (($x707 (and (and (and $x698 $x700) $x703) $x706)))
 (let (($x840 (and $x707 true)))
 (let (($x664 (= $r_main01_3 0)))
 (let (($x669 (= A9_3 (write A8_3 $p7_free_data01_3 0))))
 (let (($x678 (= $p7_free_data01_3 (+ $p0_free_data0_2 1))))
 (let (($x683 (= A8_3 (write A_2 $p6_free_data01_3 0))))
 (let (($x691 (= $p6_free_data01_3 $p0_free_data0_2)))
 (let (($x887 (and (and (and (and (and (and $x691 $x683) $x678) $x669) $x664) $x840) $x744)))
 (let (($x643 (= loc_2 3)))
 (let (($x635 (= $r_main0_2 $r_main0_1)))
 (let (($x636 (and (and true (= $i5_free_data0_2 $i5_free_data0_1)) $x635)))
 (let (($x628 (= $p7_free_data0_2 $p7_free_data0_1)))
 (let (($x625 (= $p6_free_data0_2 $p6_free_data0_1)))
 (let (($x622 (= $p4_free_data0_2 $p4_free_data0_1)))
 (let (($x619 (= $p4_alloc_data0_2 $p4_alloc_data0_1)))
 (let (($x616 (= $p3_free_data0_2 $p3_free_data0_1)))
 (let (($x613 (= $p3_alloc_data0_2 $p3_alloc_data0_1)))
 (let (($x610 (= $p2_free_data0_2 $p2_free_data0_1)))
 (let (($x607 (= $p2_alloc_data0_2 $p2_alloc_data0_1)))
 (let (($x604 (= $p1_free_data0_2 $p1_free_data0_1)))
 (let (($x601 (= $p1_alloc_data0_2 $p1_alloc_data0_1)))
 (let (($x598 (= $p0_main0_2 $p0_main0_1)))
 (let (($x595 (= $p0_free_data0_2 $p0_free_data0_1)))
 (let (($x599 (and (and (and true (= $p0_alloc_data0_2 $p0_alloc_data0_1)) $x595) $x598)))
 (let (($x617 (and (and (and (and (and (and $x599 $x601) $x604) $x607) $x610) $x613) $x616)))
 (let (($x629 (and (and (and (and $x617 $x619) $x622) $x625) $x628)))
 (let (($x648 (and true true)))
 (let (($x568 (= loc_1 2)))
 (let (($x647 (and $x568 (not (= $i5_free_data0_1 1)))))
 (let (($x588 (= A_2 A7_2)))
 (let (($x589 (and $x588 true)))
 (let (($x577 (= A7_2 (free A6_2 $p4_free_data0_1))))
 (let (($x578 (freeable A6_2 $p4_free_data0_1)))
 (let (($x579 (and $x578 $x577)))
 (let (($x582 (= A6_2 (free A_1 $p2_free_data0_1))))
 (let (($x583 (freeable A_1 $p2_free_data0_1)))
 (let (($x584 (and $x583 $x582)))
 (let (($x574 (= $i5_free_data0_1 1)))
 (let (($x575 (and $x568 $x574)))
 (let (($x875 (=> $x575 (and (and (and (and (and $x584 $x579) $x589) $x629) $x636) $x643))))
 (let (($x564 (= $r_main0_1 $r_main0_0)))
 (let (($x565 (and true $x564)))
 (let (($x559 (= $p7_free_data0_1 $p7_free_data0_0)))
 (let (($x560 (and (and true (= $p6_free_data0_1 $p6_free_data0_0)) $x559)))
 (let (($x547 (= A_1 A5_1)))
 (let (($x544 (= $p4_free_data0_1 $p4_free_data01_1)))
 (let (($x541 (= $p4_alloc_data0_1 $p4_alloc_data01_1)))
 (let (($x538 (= $p3_free_data0_1 $p3_free_data01_1)))
 (let (($x535 (= $p3_alloc_data0_1 $p3_alloc_data01_1)))
 (let (($x532 (= $p2_free_data0_1 $p2_free_data01_1)))
 (let (($x529 (= $p2_alloc_data0_1 $p2_alloc_data01_1)))
 (let (($x526 (= $p1_free_data0_1 $p1_free_data01_1)))
 (let (($x523 (= $p1_alloc_data0_1 $p1_alloc_data01_1)))
 (let (($x520 (= $p0_main0_1 $p0_main01_1)))
 (let (($x517 (= $p0_free_data0_1 $p0_free_data01_1)))
 (let (($x514 (= $p0_alloc_data0_1 $p0_alloc_data01_1)))
 (let (($x512 (= $i5_free_data0_1 $i5_free_data01_1)))
 (let (($x530 (and (and (and (and (and (and $x512 $x514) $x517) $x520) $x523) $x526) $x529)))
 (let (($x548 (and (and (and (and (and (and $x530 $x532) $x535) $x538) $x541) $x544) $x547)))
 (let (($x787 (and $x548 true)))
 (let (($x417 (= $i5_free_data01_1 0)))
 (let (($x418 (= $p2_free_data01_1 $p4_free_data01_1)))
 (let (($x419 (not $x418)))
 (let (($x423 (or (and $x418 (= $i5_free_data01_1 1)) (and $x419 $x417))))
 (let (($x428 (= $p4_free_data01_1 (read A5_1 $p3_free_data01_1))))
 (let (($x437 (= $p3_free_data01_1 (+ $p0_free_data01_1 1))))
 (let (($x442 (= $p2_free_data01_1 (read A5_1 $p1_free_data01_1))))
 (let (($x450 (= $p1_free_data01_1 $p0_free_data01_1)))
 (let (($x452 (= $p0_free_data01_1 $p0_main01_1)))
 (let (($x457 (= A5_1 (write A4_1 $p4_alloc_data01_1 $p3_alloc_data01_1))))
 (let (($x466 (= $p4_alloc_data01_1 (+ $p0_alloc_data01_1 1))))
 (let (($x469 (= A4_1 (malloc A3_1 $p3_alloc_data01_1 1))))
 (let (($x470 (mallocable_top A3_1 $p3_alloc_data01_1 1)))
 (let (($x471 (and $x470 $x469)))
 (let (($x476 (= A3_1 (write A2_1 $p2_alloc_data01_1 $p1_alloc_data01_1))))
 (let (($x484 (= $p2_alloc_data01_1 $p0_alloc_data01_1)))
 (let (($x487 (= A2_1 (malloc A1_1 $p1_alloc_data01_1 1))))
 (let (($x488 (mallocable_top A1_1 $p1_alloc_data01_1 1)))
 (let (($x489 (and $x488 $x487)))
 (let (($x491 (= $p0_alloc_data01_1 $p0_main01_1)))
 (let (($x494 (= A1_1 (malloc A_0 $p0_main01_1 2))))
 (let (($x495 (mallocable_top A_0 $p0_main01_1 2)))
 (let (($x496 (and $x495 $x494)))
 (let (($x856 (and (and (and (and (and (and $x496 $x491) $x489) $x484) $x476) $x471) $x466)))
 (let (($x862 (and (and (and (and (and (and $x856 $x457) $x452) $x450) $x442) $x437) $x428)))
 (let (($x395 (= loc_0 1)))
 (let (($x868 (=> $x395 (and (and (and (and (and $x862 $x423) $x787) $x560) $x565) $x568))))
 (let (($x390 (= A_0 epsilon)))
 (let (($x881 (and (and $x390 $x868) (and $x875 (=> $x647 (and (and (and $x648 $x629) $x636) $x643))))))
 (and (and $x881 (=> $x643 (and (and $x887 $x748) $x752))) (and $x752 (freeable A_3 l1)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
