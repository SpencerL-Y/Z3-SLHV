; 
(set-info :status unknown)
(declare-sort Heap 0)
 (declare-fun accessible (Heap Int Int) Bool)
(declare-fun free (Heap Int) Heap)
(declare-fun disjoint (Int Int Int Int) Bool)
(declare-fun mallocsize (Heap Int) Int)
(declare-fun freeable (Heap Int) Bool)
(declare-fun malloc (Heap Int Int) Heap)
(declare-fun contained (Int Int Int Int) Bool)
(declare-fun mallocable (Heap Int Int) Bool)
(declare-fun epsilon () Heap)
(declare-fun heaptop (Heap) Int)
(declare-fun mallocable_top (Heap Int Int) Bool)
(declare-fun mallocable_size (Heap Int Int) Bool)
(declare-fun read (Heap Int) Int)
(declare-fun write (Heap Int Int) Heap)
(declare-fun invalidFree_2 () Bool)
(declare-fun loc_2 () Int)
(declare-fun $r_main0_1 () Int)
(declare-fun $r_main0_2 () Int)
(declare-fun $i7_main0_1 () Int)
(declare-fun $i7_main0_2 () Int)
(declare-fun $i6_main0_1 () Int)
(declare-fun $i6_main0_2 () Int)
(declare-fun $i5_main0_1 () Int)
(declare-fun $i5_main0_2 () Int)
(declare-fun $i2_main0_1 () Int)
(declare-fun $i2_main0_2 () Int)
(declare-fun $i1_main0_1 () Int)
(declare-fun $i1_main0_2 () Int)
(declare-fun $i15_main0_1 () Int)
(declare-fun $i15_main0_2 () Int)
(declare-fun $i14_main0_1 () Int)
(declare-fun $i14_main0_2 () Int)
(declare-fun $i0_main0_1 () Int)
(declare-fun $i0_main0_2 () Int)
(declare-fun $M.0_1 () Int)
(declare-fun $M.0_2 () Int)
(declare-fun $p9_main0_1 () Int)
(declare-fun $p9_main0_2 () Int)
(declare-fun $p8_main0_1 () Int)
(declare-fun $p8_main0_2 () Int)
(declare-fun $p4_main0_1 () Int)
(declare-fun $p4_main0_2 () Int)
(declare-fun $p3_main0_1 () Int)
(declare-fun $p3_main0_2 () Int)
(declare-fun $p19_main0_1 () Int)
(declare-fun $p19_main0_2 () Int)
(declare-fun $p18_main0_1 () Int)
(declare-fun $p18_main0_2 () Int)
(declare-fun $p17_main0_1 () Int)
(declare-fun $p17_main0_2 () Int)
(declare-fun $p16_main0_1 () Int)
(declare-fun $p16_main0_2 () Int)
(declare-fun $p13_main0_1 () Int)
(declare-fun $p13_main0_2 () Int)
(declare-fun $p12_main0_1 () Int)
(declare-fun $p12_main0_2 () Int)
(declare-fun $p11_main0_1 () Int)
(declare-fun $p11_main0_2 () Int)
(declare-fun $p10_main0_1 () Int)
(declare-fun $p10_main0_2 () Int)
(declare-fun $M.2_1 () Int)
(declare-fun $M.2_2 () Int)
(declare-fun $M.1_1 () Int)
(declare-fun $M.1_2 () Int)
(declare-fun invalidFree4_2 () Bool)
(declare-fun A7_2 () Heap)
(declare-fun A_2 () Heap)
(declare-fun $p23_main01_2 () Int)
(declare-fun $p23_main0_2 () Int)
(declare-fun $p22_main01_2 () Int)
(declare-fun $p22_main0_2 () Int)
(declare-fun $p21_main01_2 () Int)
(declare-fun $p21_main0_2 () Int)
(declare-fun $p20_main01_2 () Int)
(declare-fun $p20_main0_2 () Int)
(declare-fun invalidFree3_2 () Bool)
(declare-fun A6_2 () Heap)
(declare-fun invalidFree_1 () Bool)
(declare-fun A_1 () Heap)
(declare-fun loc_1 () Int)
(declare-fun $p23_main0_1 () Int)
(declare-fun $p22_main0_1 () Int)
(declare-fun $p21_main0_1 () Int)
(declare-fun $p20_main0_1 () Int)
(declare-fun invalidFree2_2 () Bool)
(declare-fun A5_2 () Heap)
(declare-fun $p19_main01_2 () Int)
(declare-fun $p18_main01_2 () Int)
(declare-fun $p17_main01_2 () Int)
(declare-fun $p16_main01_2 () Int)
(declare-fun invalidFree1_2 () Bool)
(declare-fun A4_2 () Heap)
(declare-fun invalidFree_0 () Bool)
(declare-fun $r_main0_0 () Int)
(declare-fun $p23_main0_0 () Int)
(declare-fun $p22_main0_0 () Int)
(declare-fun $p21_main0_0 () Int)
(declare-fun $p20_main0_0 () Int)
(declare-fun $p19_main0_0 () Int)
(declare-fun $p18_main0_0 () Int)
(declare-fun $p17_main0_0 () Int)
(declare-fun $p16_main0_0 () Int)
(declare-fun A3_1 () Heap)
(declare-fun $p9_main01_1 () Int)
(declare-fun $p8_main01_1 () Int)
(declare-fun $p4_main01_1 () Int)
(declare-fun $p3_main01_1 () Int)
(declare-fun $p13_main01_1 () Int)
(declare-fun $p12_main01_1 () Int)
(declare-fun $p11_main01_1 () Int)
(declare-fun $p10_main01_1 () Int)
(declare-fun $i7_main01_1 () Int)
(declare-fun $i6_main01_1 () Int)
(declare-fun $i5_main01_1 () Int)
(declare-fun $i2_main01_1 () Int)
(declare-fun $i1_main01_1 () Int)
(declare-fun $i15_main01_1 () Int)
(declare-fun $i14_main01_1 () Int)
(declare-fun $i0_main01_1 () Int)
(declare-fun $M.23_1 () Int)
(declare-fun $M.12_1 () Int)
(declare-fun $M.02_1 () Int)
(declare-fun A2_1 () Heap)
(declare-fun $M.22_1 () Int)
(declare-fun A1_1 () Heap)
(declare-fun A_0 () Heap)
(declare-fun $M.21_1 () Int)
(declare-fun $M.11_1 () Int)
(declare-fun $M.01_1 () Int)
(declare-fun loc_0 () Int)
(assert
 (forall ((h Heap) (p Int) (s Int) (q Int) (t Int) )(let (($x151 (freeable h p)))
 (let (($x152 (and $x151 (not (disjoint p (mallocsize h p) q t)))))
 (let (($x154 (accessible h q t)))
 (let (($x146 (accessible (free h p) q t)))
 (let (($x155 (= $x146 $x154)))
 (let (($x149 (disjoint p (mallocsize h p) q t)))
 (let (($x156 (and $x151 $x149)))
 (let (($x161 (accessible (malloc h p s) q t)))
 (let (($x162 (= $x161 $x154)))
 (let (($x46 (contained p s q t)))
 (let (($x164 (and (mallocable h p s) $x46)))
 (let (($x165 (not $x164)))
 (let (($x171 (and (= (accessible epsilon p s) false) (=> $x164 (= $x161 true)))))
 (let (($x174 (and (and (and $x171 (=> $x165 $x162)) (=> (not $x151) $x155)) (=> $x156 $x155))))
 (and $x174 (=> $x152 (= $x146 false))))))))))))))))))
 )
(assert
 (forall ((h Heap) (p Int) (s Int) (q Int) )(let (($x92 (freeable h q)))
 (let ((?x93 (free h p)))
 (let (($x94 (freeable ?x93 q)))
 (let (($x95 (= $x94 $x92)))
 (let (($x30 (and (distinct p q) true)))
 (let ((?x99 (malloc h p s)))
 (let (($x100 (freeable ?x99 q)))
 (let (($x101 (= $x100 $x92)))
 (let (($x33 (= p q)))
 (let (($x103 (and (mallocable h p s) $x33)))
 (let (($x104 (not $x103)))
 (let (($x111 (and (and (= (freeable epsilon q) false) (=> $x103 (= $x100 true))) (=> $x104 $x101))))
 (and (and $x111 (=> $x33 (= $x94 false))) (=> $x30 $x95)))))))))))))))
 )
(assert
 (forall ((h Heap) (p Int) (s Int) )(let ((?x63 (heaptop h)))
 (let (($x66 (= (heaptop (free h p)) ?x63)))
 (let (($x14 (= (heaptop epsilon) 0)))
 (and (and $x14 $x66) (= (heaptop (malloc h p s)) (+ p s)))))))
 )
(assert
 (forall ((h Heap) (p Int) (s Int) )(= (mallocable h p s) (and (mallocable_size h p s) (mallocable_top h p s))))
 )
(assert
 (forall ((h Heap) (p Int) (s Int) (q Int) )(let ((?x117 (mallocsize h q)))
 (let ((?x99 (malloc h p s)))
 (let ((?x118 (mallocsize ?x99 q)))
 (let (($x119 (= ?x118 ?x117)))
 (let (($x33 (= p q)))
 (let (($x103 (and (mallocable h p s) $x33)))
 (let (($x104 (not $x103)))
 (let ((?x93 (free h p)))
 (let ((?x123 (mallocsize ?x93 q)))
 (let (($x124 (= ?x123 ?x117)))
 (let (($x126 (and (freeable h p) $x33)))
 (let (($x127 (not $x126)))
 (let (($x134 (and (and (= (mallocsize epsilon q) 0) (=> $x126 (= ?x123 0))) (=> $x127 $x124))))
 (and (and $x134 (=> $x103 (= ?x118 s))) (=> $x104 $x119))))))))))))))))
 )
(assert
 (forall ((h Heap) (p Int) (x Int) (q Int) )(let ((?x28 (read (write h p x) q)))
 (let (($x29 (= ?x28 (read h q))))
 (let (($x30 (and (distinct p q) true)))
 (and (=> (= p q) (= ?x28 x)) (=> $x30 $x29))))))
 )
(assert
 (forall ((p Int) (s Int) (q Int) (t Int) )(let (($x46 (contained p s q t)))
 (= $x46 (and (<= p q) (<= (+ q t) (+ p s))))))
 )
(assert
 (forall ((p Int) (s Int) (q Int) (t Int) )(let (($x40 (disjoint p s q t)))
 (= $x40 (or (<= (+ p s) q) (<= (+ q t) p)))))
 )
(assert
 (forall ((h Heap) (p Int) (s Int) )(let (($x18 (mallocable_size h p s)))
 (= $x18 (and (distinct s 0) true))))
 )
(assert
 (forall ((h Heap) (p Int) (s Int) )(let (($x55 (mallocable_top h p s)))
 (= $x55 (>= p (heaptop h)))))
 )
(assert
 (let (($x844 (= loc_2 3)))
 (let (($x837 (= $r_main0_2 $r_main0_1)))
 (let (($x834 (= $i7_main0_2 $i7_main0_1)))
 (let (($x831 (= $i6_main0_2 $i6_main0_1)))
 (let (($x828 (= $i5_main0_2 $i5_main0_1)))
 (let (($x825 (= $i2_main0_2 $i2_main0_1)))
 (let (($x822 (= $i1_main0_2 $i1_main0_1)))
 (let (($x819 (= $i15_main0_2 $i15_main0_1)))
 (let (($x816 (= $i14_main0_2 $i14_main0_1)))
 (let (($x813 (= $i0_main0_2 $i0_main0_1)))
 (let (($x823 (and (and (and (and (and true (= $M.0_2 $M.0_1)) $x813) $x816) $x819) $x822)))
 (let (($x838 (and (and (and (and (and $x823 $x825) $x828) $x831) $x834) $x837)))
 (let (($x806 (= $p9_main0_2 $p9_main0_1)))
 (let (($x803 (= $p8_main0_2 $p8_main0_1)))
 (let (($x800 (= $p4_main0_2 $p4_main0_1)))
 (let (($x797 (= $p3_main0_2 $p3_main0_1)))
 (let (($x895 (= $p19_main0_2 $p19_main0_1)))
 (let (($x893 (= $p18_main0_2 $p18_main0_1)))
 (let (($x891 (= $p17_main0_2 $p17_main0_1)))
 (let (($x889 (= $p16_main0_2 $p16_main0_1)))
 (let (($x782 (= $p13_main0_2 $p13_main0_1)))
 (let (($x779 (= $p12_main0_2 $p12_main0_1)))
 (let (($x776 (= $p11_main0_2 $p11_main0_1)))
 (let (($x773 (= $p10_main0_2 $p10_main0_1)))
 (let (($x774 (and (and (and true (= $M.1_2 $M.1_1)) (= $M.2_2 $M.2_1)) $x773)))
 (let (($x783 (and (and (and $x774 $x776) $x779) $x782)))
 (let (($x898 (and (and (and (and (and (and $x783 $x889) $x891) $x893) $x895) $x797) $x800)))
 (let (($x900 (and (and $x898 $x803) $x806)))
 (let (($x1027 (= invalidFree_2 invalidFree4_2)))
 (let (($x885 (= A_2 A7_2)))
 (let (($x883 (= $p23_main0_2 $p23_main01_2)))
 (let (($x881 (= $p22_main0_2 $p22_main01_2)))
 (let (($x879 (= $p21_main0_2 $p21_main01_2)))
 (let (($x878 (= $p20_main0_2 $p20_main01_2)))
 (let (($x886 (and (and (and (and $x878 $x879) $x881) $x883) $x885)))
 (let (($x1004 (= invalidFree4_2 invalidFree3_2)))
 (let (($x1005 (and invalidFree3_2 $x1004)))
 (let (($x856 (= A7_2 (free A6_2 $p23_main01_2))))
 (let (($x857 (freeable A6_2 $p23_main01_2)))
 (let (($x858 (and $x857 $x856)))
 (let (($x1007 (not $x857)))
 (let (($x1008 (and $x1007 invalidFree4_2)))
 (let (($x860 (= $p23_main01_2 $p22_main01_2)))
 (let (($x1011 (or $x860 invalidFree3_2)))
 (let (($x862 (= $p22_main01_2 $M.2_1)))
 (let (($x1012 (or $x862 invalidFree3_2)))
 (let (($x1013 (= invalidFree3_2 invalidFree_1)))
 (let (($x1014 (and invalidFree_1 $x1013)))
 (let (($x865 (= A6_2 (free A_1 $p21_main01_2))))
 (let (($x866 (freeable A_1 $p21_main01_2)))
 (let (($x867 (and $x866 $x865)))
 (let (($x1017 (and (not $x866) invalidFree3_2)))
 (let (($x869 (= $p21_main01_2 $p20_main01_2)))
 (let (($x1020 (or $x869 invalidFree_1)))
 (let (($x871 (= $p20_main01_2 $M.1_1)))
 (let (($x1021 (or $x871 invalidFree_1)))
 (let (($x1024 (and (and (and $x1021 $x1020) (or (or $x1017 (and $x867 $x1013)) $x1014)) $x1012)))
 (let (($x1029 (and (and (and $x1024 $x1011) (or (or $x1008 (and $x858 $x1004)) $x1005)) (and $x886 $x1027))))
 (let (($x715 (= loc_1 2)))
 (let (($x854 (and $x715 (not (= $i15_main0_1 1)))))
 (let (($x794 (= $p23_main0_2 $p23_main0_1)))
 (let (($x791 (= $p22_main0_2 $p22_main0_1)))
 (let (($x788 (= $p21_main0_2 $p21_main0_1)))
 (let (($x795 (and (and (and (and $x783 (= $p20_main0_2 $p20_main0_1)) $x788) $x791) $x794)))
 (let (($x807 (and (and (and (and $x795 $x797) $x800) $x803) $x806)))
 (let (($x995 (= invalidFree_2 invalidFree2_2)))
 (let (($x762 (= A_2 A5_2)))
 (let (($x759 (= $p19_main0_2 $p19_main01_2)))
 (let (($x756 (= $p18_main0_2 $p18_main01_2)))
 (let (($x753 (= $p17_main0_2 $p17_main01_2)))
 (let (($x751 (= $p16_main0_2 $p16_main01_2)))
 (let (($x763 (and (and (and (and $x751 $x753) $x756) $x759) $x762)))
 (let (($x971 (= invalidFree2_2 invalidFree1_2)))
 (let (($x972 (and invalidFree1_2 $x971)))
 (let (($x728 (= A5_2 (free A4_2 $p19_main01_2))))
 (let (($x729 (freeable A4_2 $p19_main01_2)))
 (let (($x730 (and $x729 $x728)))
 (let (($x975 (and (not $x729) invalidFree2_2)))
 (let (($x732 (= $p19_main01_2 $p18_main01_2)))
 (let (($x978 (or $x732 invalidFree1_2)))
 (let (($x734 (= $p18_main01_2 $M.2_1)))
 (let (($x979 (or $x734 invalidFree1_2)))
 (let (($x980 (= invalidFree1_2 invalidFree_1)))
 (let (($x981 (and invalidFree_1 $x980)))
 (let (($x737 (= A4_2 (free A_1 $p17_main01_2))))
 (let (($x738 (freeable A_1 $p17_main01_2)))
 (let (($x739 (and $x738 $x737)))
 (let (($x984 (and (not $x738) invalidFree1_2)))
 (let (($x741 (= $p17_main01_2 $p16_main01_2)))
 (let (($x987 (or $x741 invalidFree_1)))
 (let (($x743 (= $p16_main01_2 $M.1_1)))
 (let (($x988 (or $x743 invalidFree_1)))
 (let (($x991 (and (and (and $x988 $x987) (or (or $x984 (and $x739 $x980)) $x981)) $x979)))
 (let (($x997 (and (and (and $x991 $x978) (or (or $x975 (and $x730 $x971)) $x972)) (and $x763 $x995))))
 (let (($x725 (= $i15_main0_1 1)))
 (let (($x726 (and $x715 $x725)))
 (let (($x1034 (and (=> $x726 (and (and (and $x997 $x807) $x838) $x844)) (=> $x854 (and (and (and $x1029 $x900) $x838) $x844)))))
 (let (($x964 (= invalidFree_1 invalidFree_0)))
 (let (($x710 (= $r_main0_1 $r_main0_0)))
 (let (($x711 (and true $x710)))
 (let (($x705 (= $p23_main0_1 $p23_main0_0)))
 (let (($x701 (= $p22_main0_1 $p22_main0_0)))
 (let (($x697 (= $p21_main0_1 $p21_main0_0)))
 (let (($x693 (= $p20_main0_1 $p20_main0_0)))
 (let (($x689 (= $p19_main0_1 $p19_main0_0)))
 (let (($x685 (= $p18_main0_1 $p18_main0_0)))
 (let (($x681 (= $p17_main0_1 $p17_main0_0)))
 (let (($x690 (and (and (and (and true (= $p16_main0_1 $p16_main0_0)) $x681) $x685) $x689)))
 (let (($x706 (and (and (and (and $x690 $x693) $x697) $x701) $x705)))
 (let (($x669 (= A_1 A3_1)))
 (let (($x666 (= $p9_main0_1 $p9_main01_1)))
 (let (($x663 (= $p8_main0_1 $p8_main01_1)))
 (let (($x660 (= $p4_main0_1 $p4_main01_1)))
 (let (($x657 (= $p3_main0_1 $p3_main01_1)))
 (let (($x654 (= $p13_main0_1 $p13_main01_1)))
 (let (($x651 (= $p12_main0_1 $p12_main01_1)))
 (let (($x648 (= $p11_main0_1 $p11_main01_1)))
 (let (($x645 (= $p10_main0_1 $p10_main01_1)))
 (let (($x642 (= $i7_main0_1 $i7_main01_1)))
 (let (($x639 (= $i6_main0_1 $i6_main01_1)))
 (let (($x636 (= $i5_main0_1 $i5_main01_1)))
 (let (($x633 (= $i2_main0_1 $i2_main01_1)))
 (let (($x630 (= $i1_main0_1 $i1_main01_1)))
 (let (($x627 (= $i15_main0_1 $i15_main01_1)))
 (let (($x624 (= $i14_main0_1 $i14_main01_1)))
 (let (($x621 (= $i0_main0_1 $i0_main01_1)))
 (let (($x618 (= $M.2_1 $M.23_1)))
 (let (($x622 (and (and (and (= $M.0_1 $M.02_1) (= $M.1_1 $M.12_1)) $x618) $x621)))
 (let (($x640 (and (and (and (and (and (and $x622 $x624) $x627) $x630) $x633) $x636) $x639)))
 (let (($x658 (and (and (and (and (and (and $x640 $x642) $x645) $x648) $x651) $x654) $x657)))
 (let (($x670 (and (and (and (and $x658 $x660) $x663) $x666) $x669)))
 (let (($x959 (and $x670 true)))
 (let (($x515 (or (and (and (distinct $i14_main01_1 0) true) (= $i15_main01_1 1)) (and (not (and (distinct $i14_main01_1 0) true)) (= $i15_main01_1 0)))))
 (let (($x520 (= $i14_main01_1 (read A3_1 $p13_main01_1))))
 (let (($x913 (or $x520 invalidFree_0)))
 (let (($x531 (= $p12_main01_1 $M.23_1)))
 (let (($x915 (or $x531 invalidFree_0)))
 (let (($x536 (= A3_1 (write A2_1 $p10_main01_1 0))))
 (let (($x916 (or $x536 invalidFree_0)))
 (let (($x544 (= $M.23_1 $p11_main01_1)))
 (let (($x917 (or $x544 invalidFree_0)))
 (let (($x549 (= $p10_main01_1 $M.22_1)))
 (let (($x919 (or $x549 invalidFree_0)))
 (let (($x551 (= $M.22_1 $p8_main01_1)))
 (let (($x920 (or $x551 invalidFree_0)))
 (let (($x553 (= $p9_main01_1 $p8_main01_1)))
 (let (($x921 (or $x553 invalidFree_0)))
 (let (($x558 (and (mallocable_top A1_1 $p8_main01_1 3) (= A2_1 (malloc A1_1 $p8_main01_1 3)))))
 (let (($x922 (or $x558 invalidFree_0)))
 (let (($x560 (= $i7_main01_1 12)))
 (let (($x923 (or $x560 invalidFree_0)))
 (let (($x562 (= $i6_main01_1 3)))
 (let (($x924 (or $x562 invalidFree_0)))
 (let (($x564 (= $i5_main01_1 3)))
 (let (($x925 (or $x564 invalidFree_0)))
 (let (($x566 (= $M.12_1 $p3_main01_1)))
 (let (($x926 (or $x566 invalidFree_0)))
 (let (($x568 (= $p4_main01_1 $p3_main01_1)))
 (let (($x927 (or $x568 invalidFree_0)))
 (let (($x573 (and (mallocable_top A_0 $p3_main01_1 3) (= A1_1 (malloc A_0 $p3_main01_1 3)))))
 (let (($x928 (or $x573 invalidFree_0)))
 (let (($x575 (= $i2_main01_1 12)))
 (let (($x929 (or $x575 invalidFree_0)))
 (let (($x577 (= $i1_main01_1 3)))
 (let (($x930 (or $x577 invalidFree_0)))
 (let (($x579 (= $i0_main01_1 3)))
 (let (($x931 (or $x579 invalidFree_0)))
 (let (($x581 (= $M.02_1 3)))
 (let (($x932 (or $x581 invalidFree_0)))
 (let (($x583 (= $M.21_1 0)))
 (let (($x933 (or $x583 invalidFree_0)))
 (let (($x585 (= $M.11_1 0)))
 (let (($x934 (or $x585 invalidFree_0)))
 (let (($x587 (= $M.01_1 0)))
 (let (($x935 (or $x587 invalidFree_0)))
 (let (($x941 (and (and (and (and (and (and $x935 $x934) $x933) $x932) $x931) $x930) $x929)))
 (let (($x947 (and (and (and (and (and (and $x941 $x928) $x927) $x926) $x925) $x924) $x923)))
 (let (($x952 (and (and (and (and (and $x947 $x922) $x921) $x920) $x919) (or (= $p11_main01_1 (+ $p10_main01_1 1)) invalidFree_0))))
 (let (($x956 (and (and (and (and $x952 $x917) $x916) $x915) (or (= $p13_main01_1 (+ $p12_main01_1 (- 1))) invalidFree_0))))
 (let (($x962 (and (and (and (and (and $x956 $x913) (or $x515 invalidFree_0)) $x959) $x706) $x711)))
 (let (($x480 (= loc_0 1)))
 (let (($x968 (and (and (= A_0 epsilon) (not invalidFree_0)) (=> $x480 (and (and $x962 $x964) $x715)))))
 (and (and $x968 $x1034) invalidFree_2))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
