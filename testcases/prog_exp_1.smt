 (set-logic SLHV)
 (declare-hvar emp IntHeap)
 (declare-locvar nil IntLoc)
  (declare-datatype  pt_record_0 
  ((Pt_R_0 (d Int) (l IntLoc)))
  )
 (delcare-const loc_0 Int)
 (declare-const loc_1 Int)
 (declare-const $r_main0_0 Int)
 (declare-const $r_main0_1 Int)
 (declare-locvar $p9_main0_0 IntLoc)
 (declare-locvar $p9_main0_1 IntLoc)
 (declare-locvar $p8_main0_0 IntLoc)
 (declare-locvar $p8_main0_1 IntLoc)
 (declare-locvar $p6_main0_0 IntLoc)
 (declare-locvar $p6_main0_1 IntLoc)
 (declare-locvar $p3_main0_0 IntLoc)
 (declare-locvar $p3_main0_1 IntLoc)
 (declare-hvar H5_1 IntHeap)
 (declare-hvar H_1 IntHeap)
 (declare-locvar $p1_main0_0 IntLoc)
 (declare-locvar $p1_main0_1 IntLoc)
 (declare-locvar $p0_main0_0 IntLoc)
 (declare-locvar $p0_main0_1 IntLoc)
 (declare-const $i2_main01_1 Int)
 (declare-const $i2_main0_1 Int)
 (declare-locvar nil IntLoc)
 (declare-locvar $p1_main0 IntLoc)
 (declare-hvar uplus IntHeap)
 (declare-hvar pt IntHeap)
 (declare-locvar l7 IntLoc)
 (declare-const d6 Int)
 (declare-locvar $p0_main0 IntLoc)
 (declare-hvar H_0 IntHeap)
 (declare-const loc_0 Int)
 (declare-const $i2_main0_0 Int)
 (declare-const $i2_main0 Int)
 (declare-hvar H4_1 IntHeap)
 (declare-locvar $p6_main01_1 IntLoc)
 (declare-hvar h4 IntHeap)
 (declare-locvar l6 IntLoc)
 (declare-const d5_1 Int)
 (declare-locvar $p9_main0 IntLoc)
 (declare-hvar H3_1 IntHeap)
 (declare-hvar h3 IntHeap)
 (declare-locvar l5 IntLoc)
 (declare-const d4_1 Int)
 (declare-locvar $p8_main0 IntLoc)
 (declare-hvar H2_1 IntHeap)
 (declare-locvar l4 IntLoc)
 (declare-const d3_1 Int)
 (declare-hvar h2 IntHeap)
 (declare-locvar l3 IntLoc)
 (declare-hvar H1_1 IntHeap)
 (declare-locvar l2 IntLoc)
 (declare-const d2_1 Int)
 (declare-locvar $p3_main0 IntLoc)
 (declare-hvar h1 IntHeap)
 (declare-locvar l1 IntLoc)
 (declare-const d1 Int)
 (declare-const $r_main01_1 Int)
 (declare-hvar emp IntHeap)
 (assert
  (let (($x260 (or (= loc_1 2) (= loc_1 3))))
  (let (($x217 (= $r_main0_1 $r_main0_0)))
  (let (($x130 (= $p9_main0_1 $p9_main0_0)))
  (let (($x126 (= $p8_main0_1 $p8_main0_0)))
  (let (($x122 (= $p6_main0_1 $p6_main0_0)))
  (let (($x118 (= $p3_main0_1 $p3_main0_0)))
  (let (($x251 (= H_1 H5_1)))
  (let (($x114 (= $p1_main0_1 $p1_main0_0)))
  (let (($x110 (= $p0_main0_1 $p0_main0_0)))
  (let (($x247 (= $i2_main0_1 $i2_main01_1)))
  (let (($x243 (or (and (= $p1_main0 nil) (= $i2_main01_1 1)) (and (not (= $p1_main0 nil)) (= $i2_main01_1 0)))))
  (let (($x245 (= H5_1 (uplus H_0 (pt $p0_main0 (Pt_R_0 d6 l7))))))
  (let (($x253 (and (and (and (and (and (and $x245 $x243) $x247) $x110) $x114) $x251) $x118)))
  (let (($x262 (not (= loc_0 5))))
  (let (($x263 (or $x262 (and (and (and (and (and $x253 $x122) $x126) $x130) $x217) $x260))))
  (let (($x137 (= loc_1 4)))
  (let (($x133 (= H_1 H_0)))
  (let (($x225 (and (and (and (and true (= $i2_main0_1 $i2_main0_0)) $x110) $x114) $x118)))
  (let (($x231 (and (and (and (and (and (and $x225 $x122) $x126) $x130) $x217) $x133) $x137)))
  (let (($x232 (not (= loc_0 4))))
  (let (($x219 (= loc_1 1)))
  (let (($x165 (and (and (and (= $i2_main0 1) (= $i2_main0_1 $i2_main0_0)) $x110) $x114)))
  (let (($x153 (and (and (and (and (and (and $x165 $x118) $x122) $x126) $x130) $x217) $x133)))
  (let (($x160 (not (= loc_0 3))))
  (let (($x213 (= H_1 H4_1)))
  (let (($x209 (= $p6_main0_1 $p6_main01_1)))
  (let (($x106 (= $i2_main0_1 $i2_main0_0)))
  (let (($x170 (= H4_1 h4)))
  (let (($x174 (= H3_1 (uplus h4 (pt $p9_main0 (Pt_R_0 d5_1 l6))))))
  (let (($x176 (= H3_1 h3)))
  (let (($x180 (= H2_1 (uplus h3 (pt $p8_main0 (Pt_R_0 d4_1 l5))))))
  (let (($x182 (= $p6_main01_1 l4)))
  (let (($x186 (= H2_1 (uplus h2 (pt $p0_main0 (Pt_R_0 d3_1 l4))))))
  (let (($x190 (= H1_1 (uplus h2 (pt $p0_main0 (Pt_R_0 d3_1 l3))))))
  (let (($x193 (= $p6_main01_1 l2)))
  (let (($x197 (= H1_1 (uplus h1 (pt $p3_main0 (Pt_R_0 d2_1 l2))))))
  (let (($x200 (= H1_1 (uplus H_0 (pt $p3_main0 (Pt_R_0 d1 l1))))))
  (let (($x10 (= $i2_main0 1)))
  (let (($x11 (not $x10)))
  (let (($x203 (and (and (and $x11 $x200) (and $x197 $x193)) (and (and $x190 $x186) $x182))))
  (let (($x207 (and (and (and (and $x203 (and $x180 $x176)) (and $x174 $x170)) $x106) $x110)))
  (let (($x215 (and (and (and (and (and (and $x207 $x118) $x209) $x126) $x130) $x213) $x114)))
  (let (($x221 (not (= loc_0 2))))
  (let (($x111 (and (and (and (= $r_main01_1 0) (= $r_main0_1 $r_main01_1)) $x106) $x110)))
  (let (($x134 (and (and (and (and (and (and $x111 $x114) $x118) $x122) $x126) $x130) $x133)))
  (let (($x139 (not (= loc_0 1))))
  (let (($x168 (and (and true (or $x139 (and $x134 $x137))) (or $x221 (and (and $x215 $x217) $x219)))))
  (let (($x264 (and (and (and $x168 (or $x160 (and $x153 $x219))) (or $x232 $x231)) $x263)))
  (let (($x95 (= H_0 emp)))
  (and $x95 $x264)))))))))))))))))))))))))))))))))))))))))))))))))))
 (check-sat)