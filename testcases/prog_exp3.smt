(set-logic SLHV)
(declare-hvar emp IntHeap)
(declare-locvar nil IntLoc)
(declare-datatype pt_record_0 ((Pt_R_0 (Pt_R_0_1 IntLoc) (Pt_R_0_2 IntLoc))))
(declare-datatype pt_record_1 ((Pt_R_1 (Pt_R_1_1 Int))))
(declare-const loc_1 Int)
(declare-const $r_main0_0 Int)
(declare-const $r_main0_1 Int)
(declare-hvar H9_1 IntHeap)
(declare-hvar H_1 IntHeap)
(declare-locvar $p4_free_data01_1 IntLoc)
(declare-locvar $p4_free_data0_1 IntLoc)
(declare-locvar $p3_alloc_data0_0 IntLoc)
(declare-locvar $p3_alloc_data0_1 IntLoc)
(declare-locvar $p2_free_data01_1 IntLoc)
(declare-locvar $p2_free_data0_1 IntLoc)
(declare-locvar $p1_alloc_data0_0 IntLoc)
(declare-locvar $p1_alloc_data0_1 IntLoc)
(declare-locvar $p0_main0_0 IntLoc)
(declare-locvar $p0_main0_1 IntLoc)
(declare-locvar $p0_free_data01_1 IntLoc)
(declare-locvar $p0_free_data0_1 IntLoc)
(declare-locvar $p0_alloc_data01_1 IntLoc)
(declare-locvar $p0_alloc_data0_1 IntLoc)
(declare-const $i5_free_data01_1 Int)
(declare-const $i5_free_data0_1 Int)
(declare-locvar l18 IntLoc)
(declare-locvar l17 IntLoc)
(declare-hvar h8 IntHeap)
(declare-locvar l15 IntLoc)
(declare-locvar l16 IntLoc)
(declare-hvar h7 IntHeap)
(declare-locvar $p0_main0 IntLoc)
(declare-locvar l14 IntLoc)
(declare-locvar $p3_alloc_data0 IntLoc)
(declare-locvar l12 IntLoc)
(declare-hvar h6 IntHeap)
(declare-locvar l13 IntLoc)
(declare-hvar H8_1 IntHeap)
(declare-const d4 Int)
(declare-hvar H7_1 IntHeap)
(declare-locvar l11 IntLoc)
(declare-locvar $p1_alloc_data0 IntLoc)
(declare-locvar l10 IntLoc)
(declare-hvar h5 IntHeap)
(declare-locvar l9 IntLoc)
(declare-hvar H6_1 IntHeap)
(declare-const d3 Int)
(declare-hvar H5_1 IntHeap)
(declare-locvar l8 IntLoc)
(declare-locvar l7 IntLoc)
(declare-hvar H_0 IntHeap)
(declare-const loc_0 Int)
(declare-hvar emp IntHeap)
(assert
 (let (($x304 (or (= loc_1 1) (= loc_1 2))))
 (let (($x298 (= $r_main0_1 $r_main0_0)))
 (let (($x294 (= H_1 H9_1)))
 (let (($x292 (= $p4_free_data0_1 $p4_free_data01_1)))
 (let (($x290 (= $p3_alloc_data0_1 $p3_alloc_data0_0)))
 (let (($x288 (= $p2_free_data0_1 $p2_free_data01_1)))
 (let (($x286 (= $p1_alloc_data0_1 $p1_alloc_data0_0)))
 (let (($x284 (= $p0_main0_1 $p0_main0_0)))
 (let (($x282 (= $p0_free_data0_1 $p0_free_data01_1)))
 (let (($x280 (= $p0_alloc_data0_1 $p0_alloc_data01_1)))
 (let (($x278 (= $i5_free_data0_1 $i5_free_data01_1)))
 (let (($x228 (= $i5_free_data01_1 0)))
 (let (($x229 (= $p2_free_data01_1 $p4_free_data01_1)))
 (let (($x230 (not $x229)))
 (let (($x234 (or (and $x229 (= $i5_free_data01_1 1)) (and $x230 $x228))))
 (let (($x235 (= $p4_free_data01_1 l18)))
 (let (($x238 (= H9_1 (uplus h8 (pt $p0_free_data01_1 (Pt_R_0 l17 l18))))))
 (let (($x240 (= $p2_free_data01_1 l15)))
 (let (($x243 (= H9_1 (uplus h7 (pt $p0_free_data01_1 (Pt_R_0 l15 l16))))))
 (let (($x245 (= $p0_free_data01_1 $p0_main0)))
 (let (($x129 (= $p3_alloc_data0 l14)))
 (let (($x248 (= H9_1 (uplus h6 (pt $p0_alloc_data01_1 (Pt_R_0 l12 l14))))))
 (let (($x251 (= H8_1 (uplus h6 (pt $p0_alloc_data01_1 (Pt_R_0 l12 l13))))))
 (let (($x255 (= H8_1 (uplus H7_1 (pt $p3_alloc_data0 (Pt_R_1 d4))))))
 (let (($x104 (= $p1_alloc_data0 l11)))
 (let (($x258 (= H7_1 (uplus h5 (pt $p0_alloc_data01_1 (Pt_R_0 l11 l10))))))
 (let (($x261 (= H6_1 (uplus h5 (pt $p0_alloc_data01_1 (Pt_R_0 l9 l10))))))
 (let (($x265 (= H6_1 (uplus H5_1 (pt $p1_alloc_data0 (Pt_R_1 d3))))))
 (let (($x266 (= $p0_alloc_data01_1 $p0_main0)))
 (let (($x268 (= H5_1 (uplus H_0 (pt $p0_main0 (Pt_R_0 l7 l8))))))
 (let (($x272 (and (and (and (and $x268 $x266) $x265) (and (and $x261 $x258) $x104)) $x255)))
 (let (($x275 (and (and (and $x272 (and (and $x251 $x248) $x129)) $x245) (and $x243 $x240))))
 (let (($x283 (and (and (and (and (and $x275 (and $x238 $x235)) $x234) $x278) $x280) $x282)))
 (let (($x295 (and (and (and (and (and (and $x283 $x284) $x286) $x288) $x290) $x292) $x294)))
 (let (($x171 (= loc_0 5)))
 (let (($x306 (not $x171)))
 (and (and (= H_0 emp) $x171) (and true (or $x306 (and (and $x295 $x298) $x304)))))))))))))))))))))))))))))))))))))))))
(check-sat)
