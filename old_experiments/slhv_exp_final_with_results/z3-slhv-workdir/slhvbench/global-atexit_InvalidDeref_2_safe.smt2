(set-logic SLHV)
(declare-hvar emp IntHeap)
(declare-locvar nil IntLoc)
(declare-datatype pt_record_0 ((Pt_R_0 (loc IntLoc))))
(declare-datatype pt_record_1 ((Pt_R_1 (data Int))))
(declare-const invalidDeref_2 Bool)
(declare-const loc_2 Int)
(declare-const $r_main0_1 Int)
(declare-const $r_main0_2 Int)
(declare-const $i3_main0_1 Int)
(declare-const $i3_main0_2 Int)
(declare-const $i3_f0_1 Int)
(declare-const $i3_f0_2 Int)
(declare-const $i2_main0_1 Int)
(declare-const $i2_main0_2 Int)
(declare-const $i0_h0_1 Int)
(declare-const $i0_h0_2 Int)
(declare-locvar $p1_main0_1 IntLoc)
(declare-locvar $p1_main0_2 IntLoc)
(declare-locvar $p0_main0_1 IntLoc)
(declare-locvar $p0_main0_2 IntLoc)
(declare-locvar $M.0_1 IntLoc)
(declare-locvar $M.0_2 IntLoc)
(declare-const invalidDeref1_2 Bool)
(declare-hvar H3_2 IntHeap)
(declare-hvar H_2 IntHeap)
(declare-hvar AH2_2 IntHeap)
(declare-hvar AH_2 IntHeap)
(declare-locvar $p2_f01_2 IntLoc)
(declare-locvar $p2_f0_2 IntLoc)
(declare-locvar $p1_f01_2 IntLoc)
(declare-locvar $p1_f0_2 IntLoc)
(declare-locvar $p0_f01_2 IntLoc)
(declare-locvar $p0_f0_2 IntLoc)
(declare-const invalidDeref_1 Bool)
(declare-hvar h1_2 IntHeap)
(declare-locvar l3_2 IntLoc)
(declare-hvar H2_2 IntHeap)
(declare-locvar l4_2 IntLoc)
(declare-hvar h2 IntHeap)
(declare-locvar l2_2 IntLoc)
(declare-hvar AH_1 IntHeap)
(declare-const d2_2 Int)
(declare-hvar H_1 IntHeap)
(declare-const loc_1 Int)
(declare-locvar $p2_f0_1 IntLoc)
(declare-locvar $p1_f0_1 IntLoc)
(declare-locvar $p0_f0_1 IntLoc)
(declare-const invalidDeref_0 Bool)
(declare-const $r_main0_0 Int)
(declare-const $i3_main0_0 Int)
(declare-const $i3_f0_0 Int)
(declare-const $i2_main0_0 Int)
(declare-const $i0_h0_0 Int)
(declare-locvar $p2_f0_0 IntLoc)
(declare-locvar $p1_f0_0 IntLoc)
(declare-locvar $p0_f0_0 IntLoc)
(declare-hvar H1_1 IntHeap)
(declare-hvar AH1_1 IntHeap)
(declare-locvar $p1_main01_1 IntLoc)
(declare-locvar $p0_main01_1 IntLoc)
(declare-locvar $M.02_1 IntLoc)
(declare-locvar l1_1 IntLoc)
(declare-hvar AH_0 IntHeap)
(declare-const d1_1 Int)
(declare-hvar H_0 IntHeap)
(declare-locvar $M.01_1 IntLoc)
(declare-const loc_0 Int)
(assert
 (let (($x353 (= loc_2 4)))
 (let (($x265 (= $r_main0_2 $r_main0_1)))
 (let (($x262 (= $i3_main0_2 $i3_main0_1)))
 (let (($x259 (= $i3_f0_2 $i3_f0_1)))
 (let (($x256 (= $i2_main0_2 $i2_main0_1)))
 (let (($x263 (and (and (and (and true (= $i0_h0_2 $i0_h0_1)) $x256) $x259) $x262)))
 (let (($x266 (and $x263 $x265)))
 (let (($x246 (= $p1_main0_2 $p1_main0_1)))
 (let (($x240 (= $p0_main0_2 $p0_main0_1)))
 (let (($x234 (= $M.0_2 $M.0_1)))
 (let (($x235 (and true $x234)))
 (let (($x349 (and (and $x235 $x240) $x246)))
 (let (($x345 (= invalidDeref_2 invalidDeref1_2)))
 (let (($x343 (= H_2 H3_2)))
 (let (($x341 (= AH_2 AH2_2)))
 (let (($x339 (= $p2_f0_2 $p2_f01_2)))
 (let (($x342 (and (and (and (= $p0_f0_2 $p0_f01_2) (= $p1_f0_2 $p1_f01_2)) $x339) $x341)))
 (let (($x344 (and $x342 $x343)))
 (let (($x297 (= invalidDeref1_2 invalidDeref_1)))
 (let (($x298 (and invalidDeref_1 $x297)))
 (let (($x302 (= H3_2 (uplus h1_2 (pt $p2_f01_2 (Pt_R_0 $p0_f01_2))))))
 (let (($x306 (= H2_2 (uplus h1_2 (pt $p2_f01_2 (Pt_R_0 l3_2))))))
 (let (($x307 (and $x306 $x302)))
 (let (($x309 (= $p2_f01_2 nil)))
 (let (($x313 (= h2 (uplus H2_2 (pt $p2_f01_2 (Pt_R_0 l4_2))))))
 (let (($x324 (= AH2_2 (uplus AH_1 (pt l2_2 (Pt_R_1 2))))))
 (let (($x325 (= $p0_f01_2 l2_2)))
 (let (($x329 (= H2_2 (uplus H_1 (pt l2_2 (Pt_R_1 d2_2))))))
 (let (($x331 (and (and $x329 $x325) $x324)))
 (let (($x333 (and (or $x331 invalidDeref_1) (or (= $p1_f01_2 $p0_f01_2) invalidDeref_1))))
 (let (($x335 (and (and $x333 (or (= $p2_f01_2 $M.0_1) invalidDeref_1)) (or (or (and (or $x313 $x309) invalidDeref1_2) (and $x307 $x297)) $x298))))
 (let (($x224 (= loc_1 2)))
 (let (($x296 (and $x224 (not (= $i3_main0_1 1)))))
 (let (($x355 (=> $x296 (and (and (and (and $x335 (and $x344 $x345)) $x349) $x266) $x353))))
 (let (($x280 (= loc_2 3)))
 (let (($x276 (= invalidDeref_2 invalidDeref_1)))
 (let (($x272 (= H_2 H_1)))
 (let (($x273 (and (and true (= AH_2 AH_1)) $x272)))
 (let (($x249 (= $p2_f0_2 $p2_f0_1)))
 (let (($x243 (= $p1_f0_2 $p1_f0_1)))
 (let (($x250 (and (and (and (and (and $x235 (= $p0_f0_2 $p0_f0_1)) $x240) $x243) $x246) $x249)))
 (let (($x267 (and (and (and (or false invalidDeref_1) (and true true)) $x250) $x266)))
 (let (($x228 (= $i3_main0_1 1)))
 (let (($x229 (and $x224 $x228)))
 (let (($x221 (= invalidDeref_1 invalidDeref_0)))
 (let (($x217 (= $r_main0_1 $r_main0_0)))
 (let (($x213 (= $i3_main0_1 $i3_main0_0)))
 (let (($x209 (= $i3_f0_1 $i3_f0_0)))
 (let (($x205 (= $i2_main0_1 $i2_main0_0)))
 (let (($x214 (and (and (and (and true (= $i0_h0_1 $i0_h0_0)) $x205) $x209) $x213)))
 (let (($x218 (and $x214 $x217)))
 (let (($x196 (= $p2_f0_1 $p2_f0_0)))
 (let (($x197 (and (and (and true (= $p0_f0_1 $p0_f0_0)) (= $p1_f0_1 $p1_f0_0)) $x196)))
 (let (($x182 (= H_1 H1_1)))
 (let (($x179 (= AH_1 AH1_1)))
 (let (($x176 (= $p1_main0_1 $p1_main01_1)))
 (let (($x177 (and (and (= $M.0_1 $M.02_1) (= $p0_main0_1 $p0_main01_1)) $x176)))
 (let (($x184 (and (and (and $x177 $x179) $x182) true)))
 (let (($x156 (= AH1_1 (uplus AH_0 (pt l1_1 (Pt_R_1 1))))))
 (let (($x157 (= $p0_main01_1 l1_1)))
 (let (($x161 (= H1_1 (uplus H_0 (pt l1_1 (Pt_R_1 d1_1))))))
 (let (($x163 (and (and $x161 $x157) $x156)))
 (let (($x167 (and (or (= $M.01_1 nil) invalidDeref_0) (or $x163 invalidDeref_0))))
 (let (($x169 (and (and $x167 (or (= $p1_main01_1 $p0_main01_1) invalidDeref_0)) (or (= $M.02_1 $p0_main01_1) invalidDeref_0))))
 (let (($x136 (= loc_0 1)))
 (let (($x226 (=> $x136 (and (and (and (and (and $x169 $x184) $x197) $x218) $x221) $x224))))
 (let (($x140 (not invalidDeref_0)))
 (let (($x138 (and (and (= H_0 emp) (= AH_0 emp)) $x136)))
 (let (($x357 (and (and (and $x138 $x140) $x226) (and (=> $x229 (and (and (and $x267 $x273) $x276) $x280)) $x355))))
 (and $x357 invalidDeref_2)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
